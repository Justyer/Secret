#单例测试导入路径
if __name__ == '__main__':
    import sys, os
    parent_path = os.path.dirname(os.getcwd())
    sys.path.append(parent_path)

from webparser.webparserbase import ParserBase
from serializ.htmlfile import *
from serializ.oracle import *
from bean.urlbean import *
from log.logger import *

LOG=logging.getLogger()
LOG.handlers[0].setLevel(logging.INFO)
LOG.handlers[1].setLevel(logging.INFO)

################################
metadatas = ('题名','来源链接','小区名称','所属区域','小区链接','楼栋名称','地址','建成年份',                  #7
            '总楼层','当前层','朝向','建筑面积','使用面积','产权性质','装修情况','户型','卧室数量',            #16
            '客厅数量','卫生间数量','厨房数量','阳台数量','单价','总价','挂牌时间','房屋图片','信息来源',      #25
            '联系人','经纪公司','电话号码','纬度','经度','发布时间','住宅类别','建筑类别','配套设施','交通状况', #35
            '楼盘物业类型','楼盘绿化率','楼盘物业费','数据来源','城市','行政区','str_order')                    #41

import requests, re
from bs4 import BeautifulSoup, Tag
#解析赶集网站
class wwwgjcom(ParserBase):
    headers = {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.152 Safari/537.36 LBBROWSER', 'Connection': 'keep-alive'}
    htmlwrite = HtmlFile()
    shi = re.compile(r'(\d+)室|卧|卧室')
    ting = re.compile(r'(\d+)厅')
    wei = re.compile(r'(\d+)卫')
    chu = re.compile(r'(\d+)厨')
    yangtai = re.compile(r'(\d+)台|阳台')

    def __init__(self):
        super(wwwgjcom, self).__init__()

    def default(self, urlbase):
        LOG.info('赶集默认方法获得城市列表!')
        r = requests.get(urlbase.url,headers=self.headers, timeout=(3.05, 1.5))
        LOG.info('访问耗时:%.4f, url:%s', r.elapsed.microseconds/1000000, r.url)
        if(r.status_code != requests.codes.ok):
            LOG.warning('wwwgjcom %s 返回状态:%s', urlbase.url, r.status_code)
            return None
        soup = BeautifulSoup(r.content.decode('utf8'), 'html.parser') #lxml
        citys = soup.find('div', class_='search').find_next('div',class_='all-city').find_all('a')
        list = []
        i_count = 1
        i_order = urlbase.order+'0'
        t_30 = ('北京')
        t_25 = ('上海','武汉','天津','深圳')
        t_20 = ('广州','沈阳','西安','成都')
        t_15 = ('济南','南京','杭州','重庆','青岛','郑州','昆明','长沙','兰州','苏州')
        t_10 = ('烟台','无锡','宁波','温州','合肥','东莞','佛山','福州','厦门','海口','大连','哈尔滨','长春','吉林','拉萨','石家庄','太原','呼和浩特','乌鲁木齐','西宁','淄博','潍坊','贵阳','徐州')
        for i in citys:
            #if i.text not in ('北京', '上海', '广州', '深圳'): continue
            if i.text in t_30:
                i_count = 1
                while i_count <= 30:
                    list.append(UrlBean(i['href']+'fang5/o'+str(i_count)+'/', self.message('getpages'), param=i_count, headers=i.text, order=i_order))
                    LOG.info('获得城市%s页面信息%s', i.text, i['href']+'fang5/o'+str(i_count)+'/')
                    i_count += 1
            elif i.text in t_25:
                i_count = 1
                while i_count <= 25:
                    list.append(UrlBean(i['href']+'fang5/o'+str(i_count)+'/', self.message('getpages'), param=i_count, headers=i.text, order=i_order))
                    LOG.info('获得城市%s页面信息%s', i.text, i['href']+'fang5/o'+str(i_count)+'/')
                    i_count += 1
            elif i.text in t_20:
                i_count = 1
                while i_count <= 20:
                    list.append(UrlBean(i['href']+'fang5/o'+str(i_count)+'/', self.message('getpages'), param=i_count, headers=i.text, order=i_order))
                    LOG.info('获得城市%s页面信息%s', i.text, i['href']+'fang5/o'+str(i_count)+'/')
                    i_count += 1
            elif i.text in t_15:
                i_count = 1
                while i_count <= 15:
                    list.append(UrlBean(i['href']+'fang5/o'+str(i_count)+'/', self.message('getpages'), param=i_count, headers=i.text, order=i_order))
                    LOG.info('获得城市%s页面信息%s', i.text, i['href']+'fang5/o'+str(i_count)+'/')
                    i_count += 1
            elif i.text in t_10:
                i_count = 1
                while i_count <= 10:
                    list.append(UrlBean(i['href']+'fang5/o'+str(i_count)+'/', self.message('getpages'), param=i_count, headers=i.text, order=i_order))
                    LOG.info('获得城市%s页面信息%s', i.text, i['href']+'fang5/o'+str(i_count)+'/')
                    i_count += 1
            else:
                list.append(UrlBean(i['href']+'fang5/o1/', self.message('getpages'), param=1, headers=i.text, order=i_order))
<<<<<<< .mine
                LOG.info('获得城市%s页面信息%s', i.text, i['href']+'fang5/o1/')
                list.append(UrlBean(i['href']+'fang5/o2/', self.message('getpages'), param=2, headers=i.text, order=i_order))
                LOG.info('获得城市%s页面信息%s', i.text, i['href']+'fang5/o2/')
=======
                LOG.info('获得城市%s页面信息%s', i.text, i['href']+'fang5/o1/')
>>>>>>> .r274
        return list

    #解析城市二手房列表页
    def getpages(self, urlbase):
        LOG.info('gjgetpages获得城市%s二手房列表信息', urlbase.url)
        r = requests.get(urlbase.url,headers=self.headers, timeout=(3.05, 1.5))
        LOG.info('访问耗时:%.4f, url:%s', r.elapsed.microseconds/1000000, r.url)
        if(r.status_code != requests.codes.ok):
            LOG.warning('wwwgjcom %s 返回状态:%s', urlbase.url, r.status_code)
            return None
        html = r.text.encode('utf8', errors='ignore').decode('utf8', errors='ignore')
        items = re.findall('<a class="list-info-title js-title" href="(.*?)" target="_blank" title="',html,re.S)[0:-1]
        list = []
        itemIndex = 1
        i_order = urlbase.order+'1'
        host = '/'.join(r.url.split('/')[:3])
        for item in items:
            if 'click' not in item and 'http://' not in item:
                sUrl = host + item
                list.append(UrlBean(sUrl, self.message('getitem'), key=sUrl, param=urlbase.headers, order=i_order))
                LOG.debug('%s第%d页%d项' % (urlbase.headers, urlbase.param, itemIndex))
                itemIndex += 1
        #存在分页信息
        # if urlbase.param and urlbase.param<=self.fetchpage:
        #     #获得下一页地址
        #     nextpage = soup.find('div', id='house-area')
        #     if nextpage:
        #         nextpageurl = nextpage.find('a', class_='next')
        #         if nextpageurl:
        #             host = '/'.join(r.url.split('/')[:3])
        #             list.append(UrlBean(host+nextpageurl['href'], self.message('getpages'), param=urlbase.param+1, headers=urlbase.headers))
        #             LOG.debug('%s第%d页' % (urlbase.headers, urlbase.param))
        return list;

    #解析详细页面信息
    def getitem(self, urlbase):
        LOG.info('gjgetinfo获得城市%s挂牌详细信息', urlbase.url)
        t1 = time.time()
        r = requests.get(urlbase.url,headers=self.headers, timeout=(3.05, 1.5))
        t2 = time.time()
        LOG.info('处理gj请求getitem耗时:%f' % (t2-t1))
        LOG.info('访问耗时:%.4f, url:%s', r.elapsed.microseconds/1000000, r.url)
        #存储页面信息
        t1 = time.time()
        self.htmlwrite.save('%s\\%s\\%s' %(self.__class__.__name__, '二手房', urlbase.param), r.url, r.text)
        t2 = time.time()
        if(r.status_code != requests.codes.ok):
            LOG.warning('wwwgjcom %s 返回状态:%s', r.request.url, r.status_code)
            return
        t1 = time.time()
        reText = r.text
        soup = BeautifulSoup(r.content.decode('utf8'), 'html.parser') #lxml
        lr = {}
        ###############################################################################################################
        def _strip(str_info):
            return str_info.strip().replace('\n', '').replace(' ', '').replace('\t', '').replace('\r', '')
        try:
            titel = soup.find('h1',attrs={'class':'title-name'})
            lr[metadatas[0]] = titel.text
        except Exception as e:
            lr[metadatas[0]] = ''

        lr[metadatas[1]] = urlbase.url

        try:
            xiaoqu_name = soup.find('h3',attrs={'class':'xq-name'})
            name = xiaoqu_name.b.text
            lr[metadatas[2]] = name
        except:
            lr[metadatas[2]] = ''


        try:
            quyu = re.findall('位<i class="letter-space-8"></i>置：</span>(.*?)</li>',reText,re.S)[0]
            dr = re.compile(r'<[^>]+>',re.S)
            quyu = re.sub(dr,'',quyu)
            lr[metadatas[3]] = _strip(quyu)
        except:
            lr[metadatas[3]] = ''

        try:
            xiaoqu_url = soup.find('a',attrs={'class':'f12'})
            w = z + xiaoqu_url['href']
            lr[metadatas[4]] =w

        except:
            lr[metadatas[4]] = ''

        try:
            dizhi = re.findall('<span class="addr-area" title="(.*?)">',reText,re.S)[0]
            lr[metadatas[6]] = dizhi
        except:
            lr[metadatas[6]] = ''

        try:
            dangqian = re.findall('楼<i class="letter-space-8"></i>层：</span> (.*?)</li>',reText,re.S)[0]
            lr[metadatas[9]] = _strip(dangqian.split('/')[0])
        except:
            lr[metadatas[9]] = ''

        try:
            dangqian = re.findall('楼<i class="letter-space-8"></i>层：</span> (.*?)</li>',reText,re.S)[0]
            lr[metadatas[8]] = _strip(dangqian.split('/')[1])
            # print(lr[metadatas[8]])
        except:
            lr[metadatas[8]] = ''

        try:
            chaoxiang = re.findall('概<i class="letter-space-8"></i>况：</span> (.*?)</li>',reText,re.S)[0]
            lr[metadatas[10]] = _strip(chaoxiang.split('-')[0])
            # print(format_str(lr[metadatas[10]]))
        except:
            lr[metadatas[10]] = ''

        try:
            mianji = re.findall('户<i class="letter-space-8"></i>型：</span>(.*?)</li>',reText,re.S)[0]
            lr[metadatas[11]] = _strip(mianji.split('-')[1]).replace('㎡','')
        except:
            lr[metadatas[11]] = ''

        try:
            mianji_2 = re.findall('<span class="fc-gray9">套内面积：</span>(.*?)</li>',reText,re.S)[0]
            lr[metadatas[12]] = mianji_2
        except:
            lr[metadatas[12]] = ''

        try:
            chanquan = re.findall('<span class="fc-gray9">房屋产权：</span>(.*?)</li>',reText,re.S)[0]
            lr[metadatas[13]] = chanquan
        except:
            lr[metadatas[13]] = ''



        try:
            zongjia = soup.find('ul',attrs={'class':'basic-info-ul'})
            zongjia_a = zongjia.li.b.text
            lr[metadatas[22]] = zongjia_a
        except:
            lr[metadatas[22]] = ''

        try:
            danjia = re.findall('单<i class="letter-space-8"></i>价：</span> (.*?)元',reText,re.S)
            lr[metadatas[21]] = _strip(danjia[0])
        except:
            lr[metadatas[21]] = ''

        try:
            zhuangxiu = re.findall('<span class="fc-gray9">装修程度：</span>(.*?)</li>',reText,re.S)[0]
            lr[metadatas[14]] = zhuangxiu
            # print(lr[metadatas[14]])
        except:
            lr[metadatas[14]] = ''


        try:
            hu = re.findall('户<i class="letter-space-8"></i>型：</span>(.*?)-',reText,re.S)
            lr[metadatas[15]] = _strip(hu[0])
        except:
            lr[metadatas[15]] = ''
        try:
            lr[metadatas[16]] = re.search(wwwgjcom.shi,lr[metadatas[15]]).group(1)
        except:
            lr[metadatas[16]] = ''
        try:
            lr[metadatas[17]] = re.search(wwwgjcom.ting,lr[metadatas[15]]).group(1)
        except:
            lr[metadatas[17]] = ''
        try:
            lr[metadatas[18]] = re.search(wwwgjcom.wei,lr[metadatas[15]]).group(1)
        except:
            lr[metadatas[18]] = ''
        try:
            lr[metadatas[19]] = re.search(wwwgjcom.chu,lr[metadatas[15]]).group(1)
        except:
            lr[metadatas[19]] = ''
        try:
            lr[metadatas[20]] = re.search(wwwgjcom.yangtai,lr[metadatas[15]]).group(1)
        except:
            lr[metadatas[20]] = ''

        try:
            time_g = re.findall('<li><i class="f10 pr-5">(.*?)</i>',reText,re.S)[0]
            lr[metadatas[31]] = time_g
        except:
            lr[metadatas[31]] = ''

        try:
            zhuzhailei = re.findall('概<i class="letter-space-8"></i>况：</span> (.*?)</li>',reText,re.S)[0]
            lr[metadatas[32]] = _strip(zhuzhailei.split('-')[1])
            # print(format_str(lr[metadatas[32]]))
        except:
            lr[metadatas[32]] = ''

        lr[metadatas[25]] = 'gj'

        try:
            name_ren = soup.find('div',attrs={'class':'person-name'})
            name_ren_a = name_ren.span.a.text
            lr[metadatas[26]] = name_ren_a
        except:
            lr[metadatas[26]] = ''

        try:
            group_jingji = re.findall('<p class="company-name">(.*?)</p>',reText,re.S)[0]
            lr[metadatas[27]] = group_jingji
        except:
            lr[metadatas[27]] = ''

        try:
            col = re.findall('<em class="contact-mobile">(.*?)</em>',reText,re.S)[0]
            lr[metadatas[28]] = col
        except:
            lr[metadatas[28]] = ''

        try:
            lou = re.findall('<li><span class="fc-gray9">建筑结构：</span>(.*?)</li>',reText,re.S)[0]
            lr[metadatas[33]] = lou
        except:
            lr[metadatas[33]] = ''

        try:
            city = (re.findall('位<i class="letter-space-8"></i>置：</span>(.*?)</li>',reText,re.S)[0])
            dr = re.compile(r'<[^>]+>',re.S)
            city = re.sub(dr,'',city)
            lr[metadatas[40]] = city.split('-')[0]
            # print(lr[metadatas[40]])
        except:
            lr[metadatas[40]] = ''

        try:
            city_quyu = (re.findall('位<i class="letter-space-8"></i>置：</span>(.*?)</li>',reText,re.S)[0])
            dr = re.compile(r'<[^>]+>',re.S)
            city_quyu = re.sub(dr,'',city_quyu)
            lr[metadatas[41]] = city_quyu.split('-')[1]
        except:
            lr[metadatas[41]] = ''

        lr[metadatas[39]] = 'gj'
        lr[metadatas[42]] = urlbase.order if urlbase.order is not None else ''

        lr[metadatas[5]] = ''
        lr[metadatas[7]] = ''
        lr[metadatas[12]] = ''
        lr[metadatas[23]] = ''
        lr[metadatas[24]] = ''
        lr[metadatas[29]] = ''
        lr[metadatas[30]] = ''
        lr[metadatas[34]] = ''
        lr[metadatas[35]] = ''
        lr[metadatas[36]] = ''
        lr[metadatas[37]] = ''
        lr[metadatas[38]] = ''
        ###############################################################################################################
        t2 = time.time()
        LOG.info('解析页面耗时:%f' % (t2-t1))
        #将分析的信息写入数据库
        #www58com.mysql.save(lr, metadatas)
        MySqlEx.save(lr, metadatas)

    #def getinfo(self, urlbase):
        #LOG.info('58getinfo获得%s挂牌详细信息' , urlbase.url)


if __name__ == '__main__':
    wgj = wwwgjcom()
    # wgj.default(UrlBase('http://www.ganji.com/index.htm', 'wwwgjcom',order='123'))
    wgj.getpages(UrlBean('http://nj.ganji.com/fang5/o1/', 'wwwgjcom#getitem', param=10, headers='哈尔滨',order='123'))
    # wgj.getitem(UrlBean('http://hrb.ganji.com/fang5/1742252712x.htm', 'wwwgjcom#getitem', param=9, headers='哈尔滨',order='123456'))
    # print(w58.getitem(UrlBean('http://nj.58.com/ershoufang/23200967661449x.shtml?psid=199696111190136559394502435&entinfo=23200967661449_0', 'www58com#getpages', param='北京',order='12345632156')))
#print(www58com.__name__)
#print(www58com.getcitys.__name__)
#print(isinstance([], list))

"""
print(www58com.__name__)
#print(sys.modules.keys())
print(sys.modules['__main__'])

import sys
import os

def get_module():

    def main_module_name():
        mod = sys.modules['__main__']
        file = getattr(mod, '__file__', None)
        return file and os.path.splitext(os.path.basename(file))[0]

    def modname(fvars):

        file, name = fvars.get('__file__'), fvars.get('__name__')
        if file is None or name is None:
            return None

        if name == '__main__':
            name = main_module_name()
        return name

    module_name = modname(globals())
    # print globals()
    # print module_name

get_module()
"""