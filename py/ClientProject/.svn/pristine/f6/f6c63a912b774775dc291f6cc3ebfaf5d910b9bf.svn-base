#单例测试导入路径
if __name__ == '__main__':
    import sys, os
    parent_path = os.path.dirname(os.getcwd())
    sys.path.append(parent_path)

import time
from log.logger import LOG
from webparser.www_58_com import *
from webparser.www_fang_com import *
from bean.urlbean import *
from serializ.mysql import *

#from pydecorator import retries
from requests.exceptions import *
#重试3次
global HTTPTRYCOUNT
HTTPTRYCOUNT = 3

#根据消息来分发URL处理包
class UrlDispatch(object):
    SPLIT = '#'     #消息格式    类名#方法名
    def __init__(self, parsers=None):
        self.__dispatch = {}
        if parsers and isinstance(parsers, list):
           for pa in parsers:
               if pa and type(pa)==type and issubclass(pa, ParserBase):
                   self.__dispatch[pa.__name__]=pa()  #由分发器来实例化,有登陆的网站时要考虑SESSION过期的问题
                   LOG.info(INFO.URLDISPATCH_REG % (pa.__name__))
               else:
                   LOG.warn(WARN.URLDISPATCH_PARSERS_SUB_ERR, type(pa))
        else:
            LOG.warn(WARN.URLDISPATCH_PARSERS_TYPE_ERR + type(parsers))
        LOG.info(INFO.URLDISPATCH_START)

    def dispatch(self, urlbase):
        nextjobs = []
        try:
            if urlbase is None or not isinstance(urlbase, UrlBase):
                LOG.warn(WARN.URLDISPATCH_MESSAGE_FORMATERR)
                return False
            msg = urlbase.getmessage()
            msgpartl = None
            if not msg or not isinstance(msg, str):
                LOG.warn(WARN.URLDISPATCH_MESSAGE_FORMATERR)
                return False
            msgpartl = msg.split(self.SPLIT)
            if len(msgpartl)<1:
                LOG.warn(WARN.URLDISPATCH_MESSAGE_FORMATERR)
                return False
            p = self.__dispatch.get(msgpartl[0], None)
            if not p:
                LOG.warn(WARN.URLDISPATCH_MESSAGE_PARSERERR, msgpartl[0])
                return False
            funname = 'default' if len(msgpartl)==1 else  msgpartl[1]
            if hasattr(p, funname):
                global HTTPTRYCOUNT
                for httptry in range(0, HTTPTRYCOUNT+1):
                    try:
                        nextjobs = getattr(p, funname)(urlbase)
                        break
                    except (ReadTimeout, ConnectTimeout, Timeout, URLRequired, TooManyRedirects, SSLError, ProxyError, ConnectionError, HTTPError, RequestException) as e:
                        if httptry == HTTPTRYCOUNT:
                            return False
                        LOG.error("%s, url地址:%s, 1秒后重试第%d次...", str(e), urlbase.url, httptry+1)
                        time.sleep(1)
                        continue
                    except Exception as e:
                        LOG.error(WARN.URLDISPATCH_MESSAGE_PARSEREXEERR, urlbase.url, urlbase.getmessage(), str(e))
                        try:
                            MySqlEx.savelog(urlbase.url, msg, urlbase.order, str(e))
                        except Exception as e:
                            LOG.error("写错误日志时发生错误,错误信息:%s!", str(e))
                        return False
            LOG.debug(DEBUG.URLDISPATCH_DISPATCH % (msgpartl[0], funname))
        except Exception as e:
            LOG.error(WARN.URLDISPATCH_ERROR, urlbase.url, str(e))
            try:
                MySqlEx.savelog(urlbase.url, urlbase.order, msg,str(e))
            except Exception as e:
                LOG.error("写错误日志时发生错误,错误信息:%s!", str(e))
            return False
        return True, nextjobs

"""
if __name__ == '__main__':
    #print(issubclass(www58com, ParserBase))
    #print(type(www58com)== type)
    try:
        UrlDispatch([www58com, 123]).dispatch(UrlBase('www.58.com', 'www58com#getcitys'))
    except Exception as e:
        print('ERR'+str(e))
"""
